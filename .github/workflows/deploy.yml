name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: "Force AI to regenerate all covers (ignore existing)"
        required: false
        default: "false"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0  # Fetch full history to ensure we have latest
      
      - name: Install Zola
        run: |
          wget -q -O zola.tar.gz https://github.com/getzola/zola/releases/download/v0.19.2/zola-v0.19.2-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf zola.tar.gz
          sudo mv zola /usr/local/bin/
          zola --version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore covers cache
        id: covers-cache
        uses: actions/cache/restore@v3
        with:
          path: static/images/covers
          key: covers-${{ runner.os }}-${{ hashFiles('content/posts/**','scripts/generate-ai-covers.mjs','package.json') }}

      - name: Install cover generator deps
        run: |
          if [ -f package.json ]; then
            npm install --no-audit --no-fund
          fi

      - name: Generate AI covers (Replicate)
        env:
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
          REPLICATE_MODEL_VERSION: ${{ secrets.REPLICATE_MODEL_VERSION }}
          FORCE_REGENERATE_COVERS: ${{ inputs.force_regenerate }}
          MAX_AI_COVERS:
        run: |
          if [ -f scripts/generate-ai-covers.mjs ]; then
            echo "Generating AI covers via Replicate (skip if PNG exists in static/images/covers)"
            npm run generate:ai || echo "AI cover generation skipped"
          fi

      - name: Save covers cache (if new)
        uses: actions/cache/save@v3
        if: steps.covers-cache.outputs.cache-hit != 'true'
        with:
          path: static/images/covers
          key: covers-${{ runner.os }}-${{ hashFiles('content/posts/**','scripts/generate-ai-covers.mjs','package.json') }}

      # Removed social/icon-based cover generator – AI only now

      # (Removed favicon regeneration step)
      
      - name: Build site
        run: |
          echo "Building site..."
          echo "Verifying covers before build..."
          ls -la static/images/covers || echo "No covers directory yet"
          zola build --output-dir public
          echo "Build complete"
          echo ""
          echo "Verifying critical files:"
          ls -la public/posts/ 2>/dev/null | head -10 || echo "posts directory not found"
          if [ -f "public/posts/github-actions-when-automation-meets-reality/index.html" ]; then
            echo "✓ GitHub Actions blog post exists"
          else
            echo "✗ GitHub Actions blog post NOT found!"
            exit 1
          fi
      
      - name: Verify build
        run: |
          echo "=== Verification ==="
          echo "Checking HTML for data-theme attribute:"
          if grep -q 'data-theme="toggle"' public/index.html; then
            echo "✓ data-theme attribute found"
          else
            echo "✗ WARNING: data-theme not found"
            echo "HTML tag:"
            grep -o '<html[^>]*>' public/index.html || echo "No HTML tag found"
          fi
          
          echo ""
          echo "Checking if toggle-theme.js exists:"
          if [ -f public/js/toggle-theme.js ]; then
            echo "✓ toggle-theme.js found"
            echo "First few lines:"
            head -5 public/js/toggle-theme.js
          else
            echo "✗ toggle-theme.js missing"
            echo "Files in public/js/:"
            ls -la public/js/ || echo "public/js/ directory doesn't exist"
          fi
          
          echo ""
          echo "Verifying init-theme.js content:"
          if grep -q "dataset.theme" public/js/init-theme.js; then
            echo "✓ init-theme.js uses dataset.theme"
            echo "Relevant line:"
            grep "dataset.theme" public/js/init-theme.js | head -1
          else
            echo "✗ init-theme.js has wrong content"
            echo "Content:"
            head -15 public/js/init-theme.js
          fi
          
          echo ""
          echo "Checking if toggle-theme.js is loaded in HTML:"
          if grep -q "toggle-theme.js" public/index.html; then
            echo "✓ toggle-theme.js is loaded"
          else
            echo "✗ toggle-theme.js not found in HTML"
          fi
          
          echo ""
          echo "=== Blog Post Verification ==="
          BLOG_POST="public/posts/github-actions-when-automation-meets-reality/index.html"
          if [ -f "$BLOG_POST" ]; then
            echo "✓ Blog post file exists"
            if grep -q "Template Conflicts and Browser Caching" "$BLOG_POST"; then
              echo "✓ 'Template Conflicts and Browser Caching' found in blog post"
            else
              echo "✗ WARNING: 'Template Conflicts and Browser Caching' NOT found in blog post"
              echo "Checking for Issue #5:"
              grep -i "issue.*5\|template\|browser.*cache" "$BLOG_POST" | head -3 || echo "No matches found"
            fi
            if grep -q "Issue #5" "$BLOG_POST"; then
              echo "✓ 'Issue #5' found in blog post"
            else
              echo "✗ WARNING: 'Issue #5' NOT found in blog post"
            fi
            echo ""
            echo "Blog post line count:"
            wc -l "$BLOG_POST"
          else
            echo "✗ Blog post file NOT found at $BLOG_POST"
            echo "Available blog posts:"
            ls -la public/posts/ 2>/dev/null || echo "public/posts/ directory doesn't exist"
          fi
          
          echo ""
          echo "=== Build Summary ==="
          echo "Total pages built:"
          find public -name "index.html" -type f | wc -l
          echo "Total blog posts:"
          find public/posts -name "index.html" -type f 2>/dev/null | wc -l

      - name: Verify covers embedded
        run: |
          echo "=== Post cover verification ==="
          echo "Available covers in public/images/covers:"
          ls -la public/images/covers 2>/dev/null || echo "No covers copied"
          check() {
            POST_SLUG=$1
            HTML=public/posts/$POST_SLUG/index.html
            PNG=public/images/covers/$POST_SLUG.png
            if [ -f "$PNG" ]; then echo "✓ PNG exists: $POST_SLUG"; else echo "✗ PNG missing: $POST_SLUG"; fi
            if [ -f "$HTML" ]; then
              if grep -q "images/covers/$POST_SLUG.png" "$HTML"; then
                echo "✓ Embedded in HTML: $POST_SLUG"
              else
                echo "✗ Not embedded: $POST_SLUG"
              fi
            else
              echo "✗ Post HTML missing: $HTML"
            fi
          }
          for s in \
            rust-serde-datetime-deserialization-error \
            cursor-payments-confusion \
            how-embracing-rust-sharpens-the-mind \
            github-actions-when-automation-meets-reality \
            why-rust-makes-you-better-engineer \
            how-my-terminal-looks; do
            check "$s"
          done
      
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true
          cname: noos.blog
      
      - name: Post-deployment verification
        run: |
          echo "=== Deployment Complete ==="
          echo "Waiting 10 seconds for GitHub Pages to update..."
          sleep 10
          echo ""
          echo "Note: It may take a few minutes for GitHub Pages to rebuild and serve the new content."
          echo "Check the Actions tab and GitHub Pages settings to verify deployment status."

